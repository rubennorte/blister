{"version":3,"file":"generated.js","sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","src/blister.js"],"names":["f","exports","module","define","amd","g","window","global","self","this","Blister","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length",1,"_deps","wrappers","VALUE","value","FACTORY","factory","container","bind","SINGLETON","singletonFactory","cachedValue","cached","prototype","constructor","get","id","wrapper","set","type","TypeError","typeOfValue","register","provider"],"mappings":"AAAA,CAAA,SAAAA,GAAA,GAAA,gBAAAC,UAAA,mBAAAC,QAAAA,OAAAD,QAAAD,QAAA,IAAA,kBAAAG,SAAAA,OAAAC,IAAAD,UAAAH,OAAA,CAAA,GAAAK,EAAAA,GAAA,mBAAAC,QAAAA,OAAA,mBAAAC,QAAAA,OAAA,mBAAAC,MAAAA,KAAAC,KAAAJ,EAAAK,QAAAV,MAAA,WAAA,MAAA,SAAAW,GAAAC,EAAAC,EAAAC,GAAA,QAAAC,GAAAC,EAAAC,GAAA,IAAAJ,EAAAG,GAAA,CAAA,IAAAJ,EAAAI,GAAA,CAAA,GAAAE,GAAA,kBAAAC,UAAAA,OAAA,KAAAF,GAAAC,EAAA,MAAAA,GAAAF,GAAA,EAAA,IAAAI,EAAA,MAAAA,GAAAJ,GAAA,EAAA,IAAAhB,GAAA,GAAAqB,OAAA,uBAAAL,EAAA,IAAA,MAAAhB,GAAAsB,KAAA,mBAAAtB,EAAA,GAAAuB,GAAAV,EAAAG,IAAAf,WAAAW,GAAAI,GAAA,GAAAQ,KAAAD,EAAAtB,QAAA,SAAAU,GAAA,GAAAE,GAAAD,EAAAI,GAAA,GAAAL,EAAA,OAAAI,GAAAF,EAAAA,EAAAF,IAAAY,EAAAA,EAAAtB,QAAAU,EAAAC,EAAAC,EAAAC,GAAA,MAAAD,GAAAG,GAAAf,QAAA,IAAA,GAAAmB,GAAA,kBAAAD,UAAAA,QAAAH,EAAA,EAAAA,EAAAF,EAAAW,OAAAT,IAAAD,EAAAD,EAAAE,GAAA,OAAAD,KAAAW,GAAA,SAAAP,EAAAjB,GCAA,YAyEA,SAAAQ,KACAD,KAAAkB,SAlEA,GAAAC,IAOAC,MAAA,SAAAC,GACA,MAAA,YACA,MAAAA,KAUAC,QAAA,SAAAC,EAAAC,GACA,MAAAD,GAAAE,KAAAD,EAAAA,IASAE,UAAA,SAAAC,EAAAH,GACA,GACAI,GADAC,GAAA,CAEA,OAAA,YAMA,MALAA,KACAA,GAAA,EACAD,EAAAD,EAAAZ,KAAAS,EAAAA,GACAG,EAAA,MAEAC,IA+BA3B,GAAA6B,WAEAC,YAAA9B,EASAmB,MAAA,QAQAM,UAAA,YAOAJ,QAAA,UAQAU,IAAA,SAAAC,GACA,GAAAC,GAAAlC,KAAAkB,MAAAe,EACA,OAAAC,IAAAA,KAsBAC,IAAA,SAAAF,EAAAZ,EAAAe,GACA,GAAA,gBAAAH,GACA,KAAA,IAAAI,WAAA,uCAAAJ,EAGA,IAAAK,SAAAjB,EAKA,IAJAe,IACAA,EAAA,aAAAE,EAAAtC,KAAA0B,UAAA1B,KAAAoB,OAGA,aAAAkB,GAAAF,IAAApC,KAAAoB,MACA,KAAA,IAAAiB,WAAA,iEAAAhB,EAIA,OADArB,MAAAkB,MAAAe,GAAAd,EAAAiB,GAAAf,EAAArB,MACAA,MAQAuC,SAAA,SAAAC,GAEA,MADAA,GAAAD,SAAAvC,MACAA,OA+BAP,EAAAD,QAAAS;AA/LA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","'use strict';\n\n/**\n * Wrapper functions to store the different types of dependencies in the\n * container\n * @private\n * @type {Object}\n */\nvar wrappers = {\n\n  /**\n   * Returns a wrapper for a VALUE dependency to be stored in the container\n   * @param {*} value\n   * @return {Function}\n   */\n  VALUE: function wrapValue(value) {\n    return function() {\n      return value;\n    };\n  },\n\n  /**\n   * Returns a wrapper for a FACTORY dependency to be stored in the container\n   * @param {Function} factory The factory function\n   * @param {Blister} container The container to use as argument and context\n   *                            for the factory\n   */\n  FACTORY: function wrapFactory(factory, container) {\n    return factory.bind(container, container);\n  },\n\n  /**\n   * Returns a wrapper for a SINGLETON dependency to be stored in the container\n   * @param {Function} singletonFactory The singleton generator function\n   * @param {Blister} container The container to use as argument and context\n   *                            for the factory\n   */\n  SINGLETON: function wrapSingleton(singletonFactory, container) {\n    var cached = false;\n    var cachedValue;\n    return function() {\n      if (!cached) {\n        cached = true;\n        cachedValue = singletonFactory.call(container, container);\n        singletonFactory = null;\n      }\n      return cachedValue;\n    };\n  }\n\n};\n\n/**\n * @name DependencyType\n * @description Possible dependency types to register in a Blister container.\n *               These constants are available as properties of all Blister\n *               instances.\n * @enum {string}\n * @property {string} VALUE\n * @property {string} FACTORY\n * @property {string} SINGLETON\n */\n\n/**\n * Dependency injection container constructor\n *\n * @example\n * var container = new Blister();\n * container.set('id', 'value');\n * container.get('id'); //> 'value';\n *\n * @class\n */\nfunction Blister() {\n  this._deps = {};\n}\n\nBlister.prototype = {\n\n  constructor: Blister,\n\n  /**\n   * Type for VALUE dependencies.\n   * It is the default type for dependencies specified as primitives: strings,\n   * numbers, booleans, etc.\n   *\n   * @constant {string}\n   */\n  VALUE: 'VALUE',\n\n  /**\n   * Type for SINGLETON dependencies.\n   * It is the default type for dependencies specified as functions\n   *\n   * @constant {string}\n   */\n  SINGLETON: 'SINGLETON',\n\n  /**\n   * Type for FACTORY dependencies\n   *\n   * @constant {string}\n   */\n  FACTORY: 'FACTORY',\n\n  /**\n   * Returns the dependency set with the given id,\n   * or undefined if it is not present\n   * @param  {string} id\n   * @return {*}\n   */\n  get: function(id) {\n    var wrapper = this._deps[id];\n    return wrapper && wrapper();\n  },\n\n  /**\n   * Registers the specified dependency in the container with the given type.\n   *\n   * If no type is passed, the default is SINGLETON for functions and\n   * VALUE for others.\n   * If the type is VALUE, the given value is returned each time the dependency\n   * is requested.\n   * If the type is SINGLETON, the given function will be called the first time\n   * the dependency is requested. The value is returned and cached for the\n   * subsequent calls.\n   * If the type is FACTORY, the given function is called each time the\n   * dependency is requested.\n   *\n   * @param {string} id The dependency id\n   * @param {*|Function} [value] The dependency definition\n   * @param {DependencyType} [type] VALUE, SINGLETON or FACTORY properties of a\n   *                        Blister instance\n   * @return {Blister} The container itself\n   */\n  set: function(id, value, type) {\n    if (typeof id !== 'string') {\n      throw new TypeError('The dependency id must be a string: ' + id);\n    }\n\n    var typeOfValue = typeof value;\n    if (!type) {\n      type = (typeOfValue === 'function') ? this.SINGLETON : this.VALUE;\n    }\n\n    if (typeOfValue !== 'function' && type !== this.VALUE) {\n      throw new TypeError('The value must be a function for types SINGLETON and FACTORY: ' + value);\n    }\n\n    this._deps[id] = wrappers[type](value, this);\n    return this;\n  },\n\n  /**\n   * Calls register on the given service provider to register its dependencies\n   * @param  {BlisterServiceProvider} provider\n   * @return {Blister} the container itself\n   */\n  register: function(provider) {\n    provider.register(this);\n    return this;\n  }\n\n};\n\n/**\n * Interface for service providers to use with Blister instances\n *\n * @interface BlisterServiceProvider\n *\n * @example\n *\n * // @implements {BlisterServiceProvider}\n * var provider = {\n *  register: function(container) {\n *    container.set('protocol', 'http://');\n *    container.set('host', 'example.com');\n *  }\n * };\n *\n * var container = new Blister();\n * container.register(provider);\n */\n\n/**\n * @function\n * @name BlisterServiceProvider#register\n * @description Registers an indeterminate number of dependencies in the passed container\n * @param {Blister} container\n */\n\nmodule.exports = Blister;\n"]}